@namespace PayMeNextApp.Shared
@inject IJSRuntime JSRuntime

@if (IsOpen)
{
    <div id="@modalId" class="fixed inset-0 z-50 flex items-center justify-center p-4" @onclick="OnOverlayClick">
        <div class="modal-backdrop fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm"></div>
        <div class="modal-content-container relative bg-gray-800 text-white rounded-xl shadow-2xl w-full @ModalSizeClass" @onclick:stopPropagation="true">
            <header class="px-6 py-4 border-b border-gray-700 flex justify-between items-center">
                <h2 class="text-2xl font-semibold">@Title</h2>
                <button class="text-gray-400 hover:text-white transition-colors" @onclick="CloseModal">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            </header>
            <main class="p-6">
                @ChildContent
            </main>
            @if (FooterActions != null)
            {
                <footer class="px-6 py-4 bg-gray-700 rounded-b-xl flex justify-end space-x-4">
                    @FooterActions
                </footer>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public string Title { get; set; } = "Modal Title";
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? FooterActions { get; set; }
    [Parameter] public string Size { get; set; } = "md";
    [Parameter] public bool CloseOnOverlayClick { get; set; } = true;

    private string modalId = "modal-" + Guid.NewGuid().ToString("N");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsOpen)
        {
            await JSRuntime.InvokeVoidAsync("gsap.fromTo", "#" + modalId + " .modal-backdrop", new { opacity = 0 }, new { opacity = 1, duration = 0.3 });
            await JSRuntime.InvokeVoidAsync("gsap.fromTo", "#" + modalId + " .modal-content-container", 
                new { opacity = 0, scale = 0.9, y = -20 }, 
                new { opacity = 1, scale = 1, y = 0, duration = 0.4, ease = "power3.out" });
        }
    }

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("gsap.to", "#" + modalId + " .modal-content-container", new { opacity = 0, scale = 0.9, y = -20, duration = 0.3, ease = "power2.in" });
        await JSRuntime.InvokeVoidAsync("gsap.to", "#" + modalId + " .modal-backdrop", new { opacity = 0, duration = 0.3 });
        await Task.Delay(300); // Wait for animation to complete
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    private async Task OnOverlayClick()
    {
        if (CloseOnOverlayClick)
        {
            await CloseModal();
        }
    }

    private string ModalSizeClass => Size switch
    {
        "sm" => "max-w-sm",
        "lg" => "max-w-3xl",
        "xl" => "max-w-5xl",
        _ => "max-w-lg"
    };
}
